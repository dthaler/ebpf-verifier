# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: add immediate to unknown number

pre: ["r1.type=number"]

code:
  <start>: |
    r1 += 0

post: ["r1.type=number"]
---
test-case: add number register to unknown number

pre: ["r1.type=number", "r2.type=number"]

code:
  <start>: |
    r1 += r2

post: ["r1.type=number", "r2.type=number"]
---
test-case: add immediate to singleton number

pre: ["r1.type=number", "r1.value=5"]

code:
  <start>: |
    r1 += 3

post:
  - r1.type=number
  - r1.value=8
---
test-case: add constant register to singleton number

pre: ["r1.type=number", "r1.value=5", "r2.type=number", "r2.value=7"]

code:
  <start>: |
    r1 += r2

post:
  - r1.type=number
  - r1.value=12
  - r2.type=number
  - r2.value=7

---
test-case: add immediate to finite interval number

pre: ["r1.type=number", "r1.value=[5, 10]"]

code:
  <start>: |
    r1 += 5

post:
  - r1.type=number
  - r1.value=[10, 15]

---
test-case: add constant register number to finite interval number

pre: ["r1.type=number", "r1.value=[5, 10]", "r2.type=number", "r2.value=5"]

code:
  <start>: |
    r1 += r2

post:
  - r1.type=number
  - r1.value=[10, 15]
  - r2.type=number
  - r2.value=5
  - r1.value-r2.value<=10
  - r2.value-r1.value<=-5

---
test-case: add interval number register to constant register pointer

pre: ["r2.type=packet", "r2.packet_offset=0",
      "r7.type=number", "r7.value=[3, 5]"]

code:
  <start>: |
    r2 += r7

post:
  - r2.type=packet
  - r2.packet_offset=[3, 5]
  - r7.type=number
  - r7.value=[3, 5]
  - r2.packet_offset=r7.value

---
test-case: add constant register pointer to interval number

pre: ["r2.type=packet", "r2.packet_offset=0",
      "r7.type=number", "r7.value=[3, 5]"]

code:
  <start>: |
    r7 += r2

post:
  - r7.type=packet
  - r7.packet_offset=[3, 5]
  - r2.type=packet
  - r2.packet_offset=0
  - r2.packet_offset-r7.packet_offset<=-3
  - r7.packet_offset-r2.packet_offset<=5

---
test-case: subtract dual-typed pointers

pre: ["r2.type=[-2, -1]", "r2.packet_offset=4", "r2.stack_offset=4",
      "r3.type=[-2, -1]", "r3.packet_offset=8", "r3.stack_offset=8"]

code:
  <start>: |
    r3 -= r2

post:
  - r2.type in {packet, stack}
  - r2.packet_offset=4
  - r2.stack_offset=4

messages:
  - "0: r2.type == r3.type"

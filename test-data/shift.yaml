# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: 64-bit right shift singleton

pre: ["r1.type=number", "r1.value=4294967297"]

code:
  <start>: |
    r1 >>= 16 ; 0x100000001 >> 16 = 0x10000

post:
  - r1.type=number
  - r1.value=65536
---
test-case: 32-bit right shift singleton

pre: ["r1.type=number", "r1.value=65535"]

code:
  <start>: |
    w1 >>= 8 ; 0xffff >> 8 = 0xff

post:
  - r1.type=number
  - r1.value=255
---
test-case: 64-bit right shift interval

pre: ["r1.type=number", "r1.value=[0, 4294967297]"]

code:
  <start>: |
    r1 >>= 16 ; [0, 0x100000001] >> 16 = [0, 0x10000]

post:
  - r1.type=number
  - r1.value=[0, 65536]
---
test-case: 32-bit right shift interval

pre: ["r1.type=number", "r1.value=[0, 65535]"]

code:
  <start>: |
    w1 >>= 8 ; [0, 0xffff] >> 8 = [0, 0xff]

post:
  - r1.type=number
  - r1.value=[0, 255]
---
test-case: 32-bit right shift interval with truncation

pre: ["r1.type=number", "r1.value=[0, 4294967808]"]

code:
  <start>: |
    w1 >>= 24 ; [0, 0x100000200] >> 24 = [0, 0xff]

post:
  - r1.type=number
  - r1.value=[0, 255]
---
test-case: 32-bit right shift interval with negatives

pre: ["r1.type=number", "r1.value=[-65535, -1]"]

code:
  <start>: |
    w1 >>= 8 ; [0xffffffffffff0001, 0xffffffffffffffff] >> 8 = [0xffff00, 0xffffff]

post:
  - r1.type=number
  - r1.value=[16776960, 16777215]
---
test-case: 32-bit right shift interval crossing zero

pre: ["r1.type=number", "r1.value=[-256, 256]"]

code:
  <start>: |
    w1 >>= 8 ; [0xffffffffffffff00, 0x100] >> 8 = [0, 0xffffff]

post:
  - r1.type=number
  - r1.value=[0, 16777215]
---
test-case: 64-bit left shift singleton

pre: ["r1.type=number", "r1.value=65536"]

code:
  <start>: |
    r1 <<= 16 ; 0x10000 << 16 = 0x100000000

post:
  - r1.type=number
  - r1.value=4294967296
---
test-case: 32-bit left shift singleton

pre: ["r1.type=number", "r1.value=65537"]

code:
  <start>: |
    w1 <<= 16 ; 0x100001 << 16 = 0x10000

post:
  - r1.type=number
  - r1.value=65536
---
test-case: 64-bit left shift interval

pre: ["r1.type=number", "r1.value=[1, 65536]"]

code:
  <start>: |
    r1 <<= 16 ; [0x1, 0x10000] << 16 = [0x10000, 0x100000000]

post:
  - r1.type=number
  - r1.value=[65536, 4294967296]
---
test-case: 64-bit left shift interval with wrap

pre: ["r1.type=number", "r1.value=[0, 4294967296]"]

code:
  <start>: |
    r1 <<= 32 ; [0, 0x100000000] << 32 = [0, 0xffffffff00000000] not [0,0]

post:
  - r1.type=number
---
test-case: 32-bit left shift interval

pre: ["r1.type=number", "r1.value=[1, 65535]"]

code:
  <start>: |
    w1 <<= 16 ; [1, 0xffff] << 16 = [0x10000, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[65536, 4294901760]
---
test-case: 32-bit left shift interval with wrap

pre: ["r1.type=number", "r1.value=[1, 65537]"]

code:
  <start>: |
    w1 <<= 16 ; [1, 0x10001] << 16 = [0, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[0, 4294901760]
---
test-case: 32-bit left shift interval with another wrap

pre: ["r1.type=number", "r1.value=[2, 65537]"]

code:
  <start>: |
    w1 <<= 16 ; [2, 0x10001] << 16 = [0, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[0, 4294901760]
---
test-case: 64-bit left shift top

pre: ["r1.type=number"]

code:
  <start>: |
    r1 <<= 16

post:
  - r1.type=number
---
test-case: 32-bit left shift top

pre: ["r1.type=number"]

code:
  <start>: |
    w1 <<= 16 ; [0, 0xffffffff] << 16 = [0, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[0, 4294901760]
---
test-case: 32-bit left shift interval with longer wrap

pre: ["r1.type=number", "r1.value=[1, 65538]"]

code:
  <start>: |
    w1 <<= 16 ; [1, 0x10001] << 16 = [0, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[0, 4294901760]
---
test-case: 32-bit left shift interval with another long wrap

pre: ["r1.type=number", "r1.value=[1, 65539]"]

code:
  <start>: |
    w1 <<= 16 ; [1, 0x10002] << 16 = [0, 0xffff0000]

post:
  - r1.type=number
  - r1.value=[0, 4294901760]
---
test-case: 32-bit left shift interval with negatives

pre: ["r1.type=number", "r1.value=[-65535, -1]"]

code:
  <start>: |
    w1 <<= 8 ; [0xffffffffffff0001, 0xffffffffffffffff] << 8 = [0xff000100, 0xffffffff00]

post:
  - r1.type=number
  - r1.value=[4278190336, 4294967040]
---
test-case: 32-bit left shift interval crossing zero

pre: ["r1.type=number", "r1.value=[-1, 0]"]

code:
  <start>: |
    w1 <<= 8 ; [0xffffffffffffffff, 0x1] << 8 = [0, 0xffffff00]

post:
  - r1.type=number
  - r1.value=[0, 4294967040]
